///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// REPASO ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Hicimos un ejercicio de Es6

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////// TIMEOUTS & INTERVALS /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TIMEOUTS > Algo ques se ejcute cuando pase un tiempo. el timepo es en milsegundos. 1 seg cuando milesendos son: mil milesegundos es un segundo

// Los timeouts y los intervals son dos herramientas que se utilizan para programar tareas para que se ejecuten en el futuro en JavaScript.

// Un timeout es una función que se ejecuta una sola vez después de un período de tiempo específico. Por ejemplo, podríamos usar un timeout para mostrar un mensaje después de 10 segundos de la siguiente manera:

setTimeout(() {
    console.log('Hola después de 10 segundos');
}, 10000);

// tardará en lanzarse 10 segundos

// INTERVALS : repetir cada "X" segundos ; cuidado que si no lo paras es fijo

// Ver en repositorios de clases



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////// Prototypes /////////////////////////////////////////////////////////
////////////////////////////////////////////////////// LA Historia de JS ////////////////////////////////////////////////////////

// JS de manera nativa no es un lenguaje orientada a objetos sino a prototipos, es decir, lo interpreta a traves de prototipos.

// Origen de los prototipos, el porqué

// Es algo que no se hace ni se usa ya que es de donde sale lo que estamos aprendiendo

// Una clase no es más que un prototipo, ejemplo una clase = superheroes

// Son como constructores que hace que se simplifiquen el codigo, un ejemplo es Date

// HERENCIA

// Ejemplo puedo crear una clase VEHICULO y después otra debajo (subclases) de ella COCHES


