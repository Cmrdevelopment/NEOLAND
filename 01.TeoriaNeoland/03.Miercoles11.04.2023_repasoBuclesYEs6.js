// Bucles, una herramienta para recorrer elementos recorribles (iterar elementos iterables)
// Elementos recorribles
// Objetos y array
// A veces un String y puedes recorrer letra por letra y te saca letra por letra

// Para que sirve? PARA REALIZAR TAREAS reiradas > REITERAR TAREAS UNA Y OTRA VEZ

// Sintaxis básica for

// for (let index = 0; index < array.length; index++) {
//     const element = array[index]; 

// }

// Es super personalizable, que vaya hacia delante, detrás y casi todo loque quieras

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// FOR ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// for (let index = 0; index < array.length; index++) { ===> i = 0 es para empezar el eje del bucle, i < array.length hasta cuando quiero que haga el bucle, i++ que le pasa al bucle 
//     const element = array[index];  ==> 

for (let i = 0; i < 10; i++) {
    console.log("Hola", i)

}

// sale esto:
// Longitud y posición
// Hola 0
// Hola 1
// Hola 2
// Hola 3
// Hola 4
// Hola 5
// Hola 6
// Hola 7
// Hola 8
// Hola 9

// Explicación de como es el bucle en repaso bucles de clase del día de hoy y se hizo ejemplos

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// FOR OF ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ¿Que hace? Hace automaticamente lo del FOR pero con menos código, sin length
// No se puede sacar el indice

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// FOR EACH ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Para array
// ¿Que hace? Hace automaticamente lo del FOR pero con menos código, sin length
// Si se puede sacar el indice


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// FOR IN ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// // Es para objetos de llaves
// ¿Que hace? Hace automaticamente lo del FOR pero con menos código, sin length
// Saca las claves

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// WHILE  ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Cuidado que puedes hacer un bucle infinito

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// Hoisting  ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Muchos desarrolladores llaman a la funcón antes y no deberia ser así, JS puede recolocar las funciones pero las constantes no ==>
// Es decir, ponen el console.log arriba y las funciones abajo y funcionan pero hoy en día en ES6 casi tood se ahace con =>
// y ahí si hay que tener en cuenta que el JS funciona en cascada

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// CLOUSURES  ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Es una funcion dentro de otra donde la segunda función puede leer dentro y fuera la informaión de la primera
    // Es el acto de devolver lo principal a lo secundario, porque se ha creado en lo principal

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// ES 6  ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Nuevos metodos de JS para que todo sea más agil y más rápido, sintaxis moderna

// 1.- TEMPLETE STRING

    // ${} es para ejecutar JS en ES6 

// 2.- DESTRUCTURING

// 3.- SPREAD OPERATOR

    // concat sin hacer un concat y un push sin hacer un push pero simplificado
    // Sirve mucho para tareas por hacer

// METODOS

// Map

    // Devuelve un nuevo array

        // windows + . y pones imojis (los imojois imputan como string)
    //

// Filter

    // Es como un Buscador para encontrar TODOS

// Find

    // Encontrar el objeto o el elemnto y te lo devuelve, es la priemra concidencia. Para encontrar SOLO 1.º, ejemplo un ID ó un DNI.

// Every

    // Devuelve un true o un false, es decir, un Boleano (si todos cumples la condición) => Para detectar si todos cumple la condición

// Some

    // si uno cumple la condicion => Para detectar si uno es un kiwi de un array lleno de frutas.

//  Reduce

    // Se llama reduce porque concentra el contador en un número
    // const average = scores.reduce((accumulator, currentValue) => accumulator + currentValue, 0);


